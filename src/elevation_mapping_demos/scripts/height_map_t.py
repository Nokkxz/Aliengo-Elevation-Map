"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class height_map_t(object):
    __slots__ = ["resolution", "map", "centerOfMap"]

    __typenames__ = ["double", "double", "double"]

    __dimensions__ = [None, [100, 100], [2]]

    def __init__(self):
        self.resolution = 0.0
        self.map = [ [ 0.0 for dim1 in range(100) ] for dim0 in range(100) ]
        self.centerOfMap = [ 0.0 for dim0 in range(2) ]

    def encode(self):
        buf = BytesIO()
        buf.write(height_map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">d", self.resolution))
        for i0 in range(100):
            buf.write(struct.pack('>100d', *self.map[i0][:100]))
        buf.write(struct.pack('>2d', *self.centerOfMap[:2]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != height_map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return height_map_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = height_map_t()
        self.resolution = struct.unpack(">d", buf.read(8))[0]
        self.map = []
        for i0 in range(100):
            self.map.append(struct.unpack('>100d', buf.read(800)))
        self.centerOfMap = struct.unpack('>2d', buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if height_map_t in parents: return 0
        tmphash = (0x1b2958ebc60b23a1) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if height_map_t._packed_fingerprint is None:
            height_map_t._packed_fingerprint = struct.pack(">Q", height_map_t._get_hash_recursive([]))
        return height_map_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", height_map_t._get_packed_fingerprint())[0]

